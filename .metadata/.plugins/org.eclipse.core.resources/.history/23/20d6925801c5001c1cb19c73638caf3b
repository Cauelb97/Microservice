package com.user.registro.entity;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import com.fasterxml.jackson.annotation.JsonBackReference;

@Entity
@Table(name = "user")
public class User implements Serializable{

	private static final long serialVersionUID = 1L;

	@Id
	@Column(name="id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column(name="name")
	private String name;
	
	@Column(name="cargo")
	private String cargo;
	
	@Column(name="email")
	private String email;
	
	@Column(name="password")
	private String password;
	
	@ManyToOne
	@JoinColumn(name = "idgerente") 
	private Gerente gerenteid; 
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	private List<Registro> registro;
	

	public User() {}

	public User(@NotNull long id, @NotNull String name, @NotNull String cargo, @NotNull String email, @NotNull String password, Gerente gerenteid) { //, List<Registro> registro
		this.id = id;
		this.name = name;
		this.cargo = cargo;
		this.email = email;
		this.password = password;
//		this.registro = registro;
		this.gerenteid = gerenteid;
	}

	
	public long getId() {
		return id;
	}

	public String getName() {
		return name;
	}
	
	public String getCargo() {
		return cargo;
	}
	
	public String getEmail() {
		return email;
	}

	public String getPassword() {
		return password;
	}


	@Override
	public int hashCode() {
		return Objects.hash(id, password);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(id, other.id) && Objects.equals(password, other.password);
	}

	
}
