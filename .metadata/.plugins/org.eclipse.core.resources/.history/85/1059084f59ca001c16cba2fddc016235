package com.user.registro.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.user.registro.entity.User;
import com.user.registro.model.request.UserRequestModel;
import com.user.registro.service.UserService;

@RestController 
@RequestMapping("/userregistro") 
public class UserController {

	private final UserService userService;
	
	@Autowired
	public UserController(UserService userService){	
	
	this.userService = userService;
}	
	
	@GetMapping("/all")
	public List<User> findAll(){
		return userService.findAll();
	}
	
//	@GetMapping("{id}")
//	public ResponseEntity<Object> getPessoa(@PathVariable (value = "id") long id ) {
////		User userOptional = userService.findById(id);
////		if (!userOptional.isPresent()) {
////			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User nao encontrado"); 
////		}
////		return ResponseEntity.status(HttpStatus.OK).body(userOptional.get());
////	}
	
	
//	@PostMapping
//    public ResponseEntity<UserRequestModel> addItem(@RequestBody final UserRequestModel userRequestModel){
//        User user = userService.add;
//        return new ResponseEntity<>(ItemDto.from(item), HttpStatus.OK);
//    }

	
	@DeleteMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value="/deletar")
	public void deletarTaxa(@RequestBody User p) {
		userService.deleteUser(p.getId());
	}
	 
	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value="/atualizar")
	public User atualizarTaxa(@RequestBody User p) {
		return userService.save(p);
	}
}

