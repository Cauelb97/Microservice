package com.user.registro.Controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.user.registro.entity.User;
import com.user.registro.model.request.UserRequestModel;
import com.user.registro.service.UserService;

@RestController 
@CrossOrigin(origins = "*")
@RequestMapping("/userregistro") 
public class UserController {

	final UserService userService;
	
	public UserController(UserService userService){	
	
	this.userService = userService;
}	
	
	@GetMapping("/all")
	public List<User> findAll(){
		return userService.findAll();
	}
	
	@GetMapping("{id}")
	public ResponseEntity<Object> getPessoa(@PathVariable (value = "id") int id ) {
		Optional<User> userOptional = userService.findById(id);
		if (!userOptional.isPresent()) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User nao encontrado"); 
		}
		return ResponseEntity.status(HttpStatus.OK).body(userOptional.get());
	}
	
	
	@PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE ,value ="/inserir")
	public  ResponseEntity <Object> saveuser(@RequestBody @Valid UserRequestModel p) {
		if(userService.existsByEmail(p.getEmail())) { 
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Confito: Email ja existe!");			
		}		
		var user = new User();
		BeanUtils.copyProperties(p, user); 
		return ResponseEntity.status(HttpStatus.CREATED).body(userService.save(user));
	}
	
	@DeleteMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value="/deletar")
	public void deletarTaxa(@RequestBody User p) {
		userService.deleteUser(p);
	}
	 
	@PutMapping(consumes = MediaType.APPLICATION_JSON_VALUE, value="/atualizar")
	public User atualizarTaxa(@RequestBody User p) {
		return userService.save(p);
	}
}

